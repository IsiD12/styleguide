/* eslint import/no-extraneous-dependencies: ["error", {"devDependencies": true}] */

const fs = require('fs');
const glob = require('glob');
const log = require('../utils/logger');

const srcFolder = 'src';

async function build(module) {
  try {
    const json = JSON.parse(fs.readFileSync(module, 'utf8'));
    const fontPrefix = json.preferences.fontPref.prefix;
    const fontSets = json.iconSets;

    let generatedText = '// Attention: this file was generated by tasks/build/font.js\n\n';

    fontSets.forEach((fontSet) => {
      const { selection } = fontSet;

      selection.forEach((icon) => {
        generatedText += `$${fontPrefix}${icon.name}: \\${icon.code.toString(16)};\n\n`;
        generatedText += `.${fontPrefix}${icon.name} {\n`;
        generatedText += `  @include sg-icon-before($${fontPrefix}${icon.name});\n`;
        generatedText += '}\n';
        generatedText += '\n';
      });
    });

    const targetPath = module.replace('.font.json', '_generated.scss');
    fs.writeFileSync(targetPath, generatedText);
  } catch (error) {
    log.error('font', error);
  }
}

async function rebuild(event, font) {
  console.log('font', font);
}

async function run() {
  await new Promise((fontResolve) => {
    glob(`${srcFolder}/**/*.font.json`, async (error, files) => {
      if (error) {
        log.error('font', error);
      } else {
        const modules = files;
        await Promise.all(modules.map(module => build(module)));

        fontResolve();
      }
    });
  });
}

if (require.main === module) run();

exports.rebuild = rebuild;
exports.run = run;
